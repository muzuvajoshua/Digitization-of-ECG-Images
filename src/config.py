"""
Configuration file for ECG Digitization Project
"""

import os
from pathlib import Path

# Project root directory
PROJECT_ROOT = Path(__file__).parent.parent
DATA_DIR = PROJECT_ROOT / "data"
RAW_DATA_DIR = DATA_DIR / "raw"
PROCESSED_DATA_DIR = DATA_DIR / "processed"
MODELS_DIR = PROJECT_ROOT / "models"
EXPERIMENTS_DIR = PROJECT_ROOT / "experiments"
NOTEBOOKS_DIR = PROJECT_ROOT / "notebooks"

# Kaggle competition details
COMPETITION_NAME = "physionet-ecg-image-digitization"

# ECG specifications
ECG_LEADS = ['I', 'II', 'III', 'aVR', 'aVL', 'aVF', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6']
NUM_LEADS = 12

# Lead durations
LEAD_II_DURATION = 10.0  # seconds
OTHER_LEADS_DURATION = 2.5  # seconds

# Image segment types in training data
IMAGE_SEGMENTS = {
    '0001': 'Original color ECG image generated by ECG-image-kit',
    '0003': 'Image printed in color and scanned in color',
    '0004': 'Image printed in color and scanned in black and white',
    '0005': 'Mobile photos of color printed images',
    '0006': 'Mobile photos of ECGs on the screen of laptop',
    '0009': 'Mobile photos of stained and soaked printed ECGs',
    '0010': 'Mobile photos of printed ECGs with extensive damage',
    '0011': 'Scans of printed ECG images with mold in color',
    '0012': 'Scans of printed ECG images with mold in black and white'
}

# ECG paper specifications (standard)
# These are typical ECG paper specifications
MM_PER_MV = 10  # 10mm = 1mV (standard amplitude calibration)
MM_PER_SEC_STANDARD = 25  # 25mm/s (standard paper speed)
MM_PER_SEC_FAST = 50  # 50mm/s (fast paper speed)

# Model hyperparameters (to be tuned)
BATCH_SIZE = 8
LEARNING_RATE = 1e-4
NUM_EPOCHS = 50
EARLY_STOPPING_PATIENCE = 10

# Image preprocessing
TARGET_IMAGE_SIZE = (1024, 1024)  # Will be adjusted based on EDA
MAX_IMAGE_SIZE = (2048, 2048)

# Training configuration
TRAIN_VAL_SPLIT = 0.2
RANDOM_SEED = 42

# Evaluation
MAX_TIME_SHIFT_SECONDS = 0.2  # Maximum time shift for alignment in metric

# Paths for specific data files
TRAIN_CSV = RAW_DATA_DIR / "train.csv"
TEST_CSV = RAW_DATA_DIR / "test.csv"
SAMPLE_SUBMISSION = RAW_DATA_DIR / "sample_submission.parquet"
TRAIN_DIR = RAW_DATA_DIR / "train"
TEST_DIR = RAW_DATA_DIR / "test"

# Output paths
SUBMISSION_DIR = PROJECT_ROOT / "submissions"
SUBMISSION_DIR.mkdir(exist_ok=True)


def create_directories():
    """Create necessary directories if they don't exist."""
    directories = [
        DATA_DIR,
        RAW_DATA_DIR,
        PROCESSED_DATA_DIR,
        MODELS_DIR,
        EXPERIMENTS_DIR,
        NOTEBOOKS_DIR,
        SUBMISSION_DIR
    ]

    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
        print(f"Created/verified directory: {directory}")


def get_lead_duration(lead_name: str) -> float:
    """
    Get the expected duration for a specific lead.

    Args:
        lead_name: Name of the ECG lead

    Returns:
        Duration in seconds
    """
    if lead_name == 'II':
        return LEAD_II_DURATION
    else:
        return OTHER_LEADS_DURATION


def get_expected_samples(lead_name: str, sampling_frequency: float) -> int:
    """
    Calculate expected number of samples for a lead.

    Args:
        lead_name: Name of the ECG lead
        sampling_frequency: Sampling frequency in Hz

    Returns:
        Expected number of samples
    """
    duration = get_lead_duration(lead_name)
    return int(sampling_frequency * duration)


if __name__ == "__main__":
    print("ECG Digitization Project Configuration")
    print("=" * 50)
    print(f"Project Root: {PROJECT_ROOT}")
    print(f"Data Directory: {DATA_DIR}")
    print(f"\nECG Specifications:")
    print(f"  Number of leads: {NUM_LEADS}")
    print(f"  Leads: {', '.join(ECG_LEADS)}")
    print(f"  Lead II duration: {LEAD_II_DURATION}s")
    print(f"  Other leads duration: {OTHER_LEADS_DURATION}s")
    print(f"\nImage segments in training: {len(IMAGE_SEGMENTS)}")

    print("\nCreating directories...")
    create_directories()
    print("\nSetup complete!")
